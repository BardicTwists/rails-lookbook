#!/usr/bin/env ruby

printf "\n🤖 Loading dependencies...\n"

require "yard"
require "yaml"
require "lookbook"

printf "✅ Done!\n\n"

class Helpers
  include YARD::Templates::Helpers::HtmlHelper
  include YARD::Templates::Helpers::MethodHelper

  def linkify(*args)
    args.first
  end
end

def helpers
  Helpers.new
end

def resolve(arg)
  arg.is_a?(String) ? YARD::Registry.at(arg) : arg
end

def strip_tags(str)
  ActionView::Base.full_sanitizer.sanitize(str) if str
end

def class_data(obj)
  obj = resolve(obj)
  {
    name: obj.name.to_s,
    path: obj.path,
    description: obj.docstring.to_s.strip,
    methods: methods_for(obj)
  }
end

def method_data(obj)
  obj = resolve(obj)
  args = helpers.format_args(obj).tr("()","")
  {
    id: [obj.name, obj.scope, "method"].join("-").gsub("_","-"),
    name: obj.name.to_s,
    path: obj.path,
    signature: "#{obj.name.to_s}(#{args})",
    signature_call: obj.name.to_s,
    signature_args: args,
    description: obj.docstring.to_s.strip,
    return_types: strip_tags(helpers.format_return_types(obj)),
    scope: obj.scope.to_s,
    tags: tags_for(obj),
    klass: obj.parent.name.to_s
  }
end

def tag_data(obj)
  obj = resolve(obj)
  if obj.respond_to?(:pair)
    {
      pair: obj.name,
      name: obj.pair.name.delete_prefix(":"),
      tag_name: obj.pair.tag_name,
      text: obj.pair.text,
      types: strip_tags(helpers.format_types(obj.pair.types, false)),
    }
  else
    {
      name: obj.name,
      tag_name: obj.tag_name,
      text: obj.text,
      types: strip_tags(helpers.format_types(obj.types, false)),
    }
  end
end

def methods_for(target)
  meths = resolve(target).meths.filter { annotated? _1 }
  meths.filter! { available? _1 } 
  meths.map { method_data _1 }
end

def tags_for(target)
  resolve(target).tags.map { tag_data _1 }
end

def annotated?(code_object)
  !code_object.docstring.empty? || code_object.tags.size > 0
end

def available?(code_object)
  (!code_object.has_tag?(:api) || code_object.tag(:api).text.strip != "private") && 
    !code_object.has_tag?(:deprecated)
end

def write_data(name, data)
  data_dir = File.expand_path("../docs/src/_data/api", __dir__)
  
  File.write("#{data_dir}/#{name}.yml", YAML.dump(data.deep_stringify_keys))
end

# -----------------------------------------------

puts "🚨 Starting code parsing..."

src_path = File.expand_path("../lib", __dir__)
YARD.parse(src_path)
classes = YARD::Registry.all(:class)

printf "✅ Done!\n\n"

# -----------------------------------------------

puts "📝 Generating docs for main Lookbook module..."

write_data("lookbook", class_data("Lookbook"))

printf "✅ Done!\n\n"

# -----------------------------------------------

puts "📝 Generating entity docs..."

entities = classes.filter { _1.name.to_s.end_with?("Entity") }

entities.each do |code_object|
  write_data(code_object.name.to_s.underscore, class_data(code_object))
end

# write_data("entities", {
#   label: "Entities",
#   classes: entities.map { class_data _1 }
# })

printf "✅ Done!\n\n"

